Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

The path starts with a single slash '/'.
Any two directories are separated by a single slash '/'.
The path does not end with a trailing '/'.
The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
Return the simplified canonical path.

 

Example 1:

Input: path = "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.
Example 2:

Input: path = "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
Example 3:

Input: path = "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.


Create a Stack of String with following condition.
Iterate the loop till you doesn't reaches the end of string.
If you encounter a "/" then ignore it.
Create a temp String & Iterate the while loop till you doesn't find "/" and append it to temp.
Now check if temp == "." , then ignore it.
If temp == ".." then pop the element from the stack if it exists.
If no of the above 2 matches push temp to stack as you find a valid path.
Check out temp string on basis of above conditions till you doesn't find "/".
Now add all stack elements to result as res = "/" + st.top() + res
If res.size() is 0 then return "/" if no directory or file is present.
At last return res.




class Solution {
public:
    string simplifyPath(string path) {
        stack<string> s;
        string ans="";
        for (int i=0;i<path.size();i++){
            if (path[i]=='/'){
                continue;
            }
            string temp;
            while (i<path.size() && path[i]!='/'){
                temp+=path[i];
                i++;
            }
            if (temp=="."){
                continue;
            }
            else if (temp==".."){
                if (!s.empty()){
                    s.pop();
                }
            }
            else{
                s.push(temp);
            }
        }
        while (!s.empty()){
            ans = "/" + s.top() + ans;
            s.pop();
        }
        if (ans.size()==0){
            return "/";
        }
        return ans;
    }
};
