Intution:
-> Binary search can be applied not only on sorted array but also on monotonic(https://en.wikipedia.org/wiki/Monotonic_function) search space in which our answer lies.
-> If you are able to find the start and end of your search space which is monotonic in nature , you can start thinking of applying binary search on answers(search space) in a problem.
-> Here in this problem lets take the example of 2nd testcase:

Input: weights = [3,2,2,4,1,4], days = 3
Output: 6

-> Find the search space:

Think of a maximum weight ship can carry - This is the case if it has to carry all packages in a single day. It comes out to be total of all elements=16.

Think of a minimum weight ship can carry - This is the case if it has to carry single package everyday. So minimum weight comes out to be maximum of all elements=4.

So in weights = [3,2,2,4,1,4] our search space is from 4 to 16

If ship has capacity of 16 - Days taken 1
capacity of 4 - Days taken 5 -> (2,2) can be taken in a single day as capacity is 4

We can observe here that if we decrease the capacity of ship from 16 to 4, days taken will increase from 1 to 5.

Now here in the above case we have to find minimum capacity such that days taken is 3.

Apply simple binary search with low=4 and high=16 with a check functioin which tells us if it is possible to ship all the packages within given days with capacity=>mid= low+high/2.

Change low and high accordingly untill days =3 with minimum capacity.



class Solution {
public:
    bool helper(vector<int> &weights,int mid,int days){
        int sum=0;
        int count=1;
        int n=weights.size();
        for (int i=0;i<n;i++){
            sum+=weights[i];
            if (sum>mid){
                count++;
                sum=weights[i];
            }
        }
        if (count<=days){
            return true;
        }
        return false;
    }
    int shipWithinDays(vector<int>& weights, int days) {
        int maxcapacity=0;
        int n=weights.size();
        for (int i=0;i<n;i++){
            maxcapacity+=weights[i];
        }
        int low=*max_element(weights.begin(),weights.end());
        int high=maxcapacity;
        int result=0;
        while (low<=high){
            int mid=low+(high-low)/2;
            if (helper(weights,mid,days)){
                result=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return result;
    }
};
