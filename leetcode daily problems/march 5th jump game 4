Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.


Create an unordered_map called indices to store the indices of each value in the input array.
For each value in the input array, add its index to the corresponding vector in the indices map.
Create a queue called storeIndex to store the indices of adjacent elements and a vector called visited to mark visited indices.
Push the first index of the array to the storeIndex queue and mark it as visited in the visited vector.
Initialize a steps variable to 0.
While the storeIndex queue is not empty, do the following:
a. Get the size of the storeIndex queue.
b. For each index in the storeIndex queue, do the following:
i. If the index is the last index of the array, return the number of steps.
ii. Get the vector of indices for the current value from the indices map.
iii. Add the indices of the adjacent elements to the vector.
iv. For each index in the vector, if it is within the array bounds and has not been visited, push it to the storeIndex queue and mark it as visited in the visited vector.
v. Clear the vector of indices.
c. Increment the steps variable.
If the last index of the array is not reached, return -1.


class Solution {
public:
    int minJumps(vector<int>& arr) {
        if (arr.size()==1){
            return 0;
        }
        unordered_map<int,vector<int>> map;
        for (int i=0;i<arr.size();i++){
            map[arr[i]].push_back(i);
        }
        vector<bool> visited(arr.size());
        queue<int> q;
        q.push(0);
        visited[0]=true;
        int ans=0;
        while (!q.empty()){
            int size=q.size();
            while (size--){
                auto temp=q.front();
                q.pop();
                if (temp==arr.size()-1){
                    return ans;
                }
                vector<int>& tempindexs=map[arr[temp]];
                tempindexs.push_back(temp-1);
                tempindexs.push_back(temp+1);
                for (auto tempindex:tempindexs){
                    if (tempindex>=0 && tempindex<arr.size() && !visited[tempindex]){
                        q.push(tempindex);
                        visited[tempindex]=true;
                    }
                }
                tempindexs.clear();
            }
            ans++;
        }
        return ans;
    }
};
