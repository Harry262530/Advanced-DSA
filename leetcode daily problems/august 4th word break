Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false


class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> st(wordDict.begin(),wordDict.end());
        if (st.size()==0){
            return false;
        }
        vector<bool> ans(s.size()+1,false);
        ans[0]=true;
        for (int i=1;i<s.size()+1;i++){
            for (int j=i-1;j>=0;j--){
                if (ans[j]){
                    string word=s.substr(j,i-j);
                    if (st.find(word)!=st.end()){
                        ans[i]=true;
                        break;
                    }
                }
            }
        }
        return ans[s.size()];
    }
};
