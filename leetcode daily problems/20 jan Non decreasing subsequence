Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.

 

Example 1:

Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
Example 2:

Input: nums = [4,4,3,2,1]
Output: [[4,4]]

The unordered_set is used to avoid [4,6,7(1)] and [4,6,7(2)] in a same level when we dfs. But it will not skip [4,6,7(1),7(2)], because 7(2) is added in the next dfs level of [4,6,7(1)]. Every time we start a "next level dfs", we will initialize a new unordered_set.

class Solution {
public:
    void dfs(vector<int> nums,vector<vector<int>> &ans,vector<int> &seq,int start){
        if (seq.size()>1){
            ans.push_back(seq);
        }
        unordered_set<int> duplicate;
        for (int i=start;i<nums.size();i++){
            if ((seq.size()==0 || nums[i]>=seq.back()) && duplicate.find(nums[i])==duplicate.end()){
                seq.push_back(nums[i]);
                dfs(nums,ans,seq,i+1);
                seq.pop_back();
                duplicate.insert(nums[i]);
            }
        }
    }
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> seq;
        dfs(nums,ans,seq,0);
        return ans;
    }
};
