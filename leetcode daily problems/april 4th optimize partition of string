Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

 

Example 1:

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.
Example 2:

Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").


METHOD 1:
using set to check for duplicate, it takes little bit more time

int partitionString(string s) {
        unordered_set<char> st;
        int count=1;
        for (int i=0;i<s.size();i++){
            if (st.find(s[i])!=st.end()){
                count++;
                st.clear();
            }
            st.insert(s[i]);
        }
        return count;
}



METHOD 2: 
using array instead of set to increase performance and get less time complexity

int partitionString(string s) {
        int count=1;
        int arr[26]={0};
        for (int i=0;i<s.size();i++){
            //element is already present means it is repeating
            if (arr[s[i]-'a']==1){
                count++;
                fill(begin(arr),end(arr),0);
            }
            arr[s[i]-'a']++;
        }
        return count;
}


METHOD 3:
using set and unset bit to check for duplicates, it gives the lowest time complexity

int partitionString(string s) {
        int count=1;
        int i=0,flag=0;
        while (i<s.size()){
            int val=s[i]-'a';
            if (flag & (1<<val)){
                flag=0;
                count++;
            }
            flag=flag | (1<<val);
            
            i++;
        }
        return count;
    }
