You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]


class Solution {
    private:
    int size(ListNode* l) {
    int s = 0;
    while (l != NULL) {
        l = l->next;
        s++;
    }
    return s;
}
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int s1=size(l1);
        int s2=size(l2);
        ListNode *newhead=NULL;
        ListNode *n=NULL;
        while (l1!=NULL || l2!=NULL){
            int v1=0,v2=0;
            if (s1>=s2){
                v1=l1!=NULL?l1->val:0;
                l1=l1->next;
                s1--;
            }
            if (s2>=s1+1){
                v2=l2!=NULL?l2->val:0;
                l2=l2->next;
                s2--;
            }
            n=new ListNode(v1+v2);
            n->next=newhead;
            newhead=n;
        }
        int carry=0;
        newhead=NULL;
        while (n != NULL) {
        n->val += carry;
        if (n->val >= 10) {
            n->val = n->val % 10;
            carry = 1;
        } else {
            carry = 0;
        }
        ListNode* buf = n->next;
        n->next = newhead;
        newhead = n;
        n = buf;
        }
        if (carry > 0) {
        n = new ListNode(1);
        n->next = newhead;
        newhead = n;
        }
        return newhead;
    
    }
};
