Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
Example 2:

Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.
Example 3:

Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.


class Solution {
public:
    bool buddyStrings(string s, string goal) {
        if (s==goal){
            return(set<char>(s.begin(),s.end()).size()<s.size());
        }
        int n=s.size();
        int l=0,r=n-1;
        while (l<n && s[l]==goal[l]){
            l++;
        }
        while (r>=0 && s[r]==goal[r]){
            r--;
        }
        if (l<r){
            swap(s[l],s[r]);
        }
        return s==goal;
    }
};
