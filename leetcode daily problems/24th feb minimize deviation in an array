You are given an array nums of n positive integers.

You can perform two types of operations on any element of the array any number of times:

If the element is even, divide it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
If the element is odd, multiply it by 2.
For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.
Example 2:

Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.
Example 3:

Input: nums = [2,10,8]
Output: 3



How we will Implement it?

So, in the first step we have to multiply every odd element with 2, so that we can get rid of one operation.

Now, as we observe our above example, we are frequently shifiting with our maximum elements. So, the question arises, whether there is any data structure present which will help us to do this thing?

Answer is yes and the name of that data structure is priority queue (maximum heap).

When we will stop for finding further more answer? Answer is when we got our maximum element as odd, then we will stop. Or more precisely to say, when our top of the heap becomes odd then we will stop.


class Solution {
public:
    int minimumDeviation(vector<int>& nums) {
        int n=nums.size();
        for (int i=0;i<n;i++){
            if (nums[i]%2!=0){
                nums[i]*=2;
            }
        }
        priority_queue<int> pq;    //max heap
        int mini=*min_element(nums.begin(),nums.end());
        int maxi=*max_element(nums.begin(),nums.end());
        for (int i=0;i<n;i++){
            pq.push(nums[i]);
        }

        int ans=maxi-mini;
        while (pq.top()%2==0){
            int top=pq.top();
            pq.pop();
            ans=min(ans,top-mini);
            top=top/2;
            mini=min(mini,top);
            pq.push(top);
        }
        ans=min(ans,pq.top()-mini);
        return ans;
    }
};
