Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.empty()){
            return vector<string>();
        }
        vector<string> ans{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        deque<string> q;
        q.push_back("");
        for (auto digit: digits){
            int d=digit-'0';
            for (int i=q.size();i>0;i--){
                string token=q.front();
                q.pop_front();
                for (char ch: ans[d]){
                    q.push_back(token+ch);
                }
            }
        }
        return vector<string>(q.begin(),q.end());
    }
};
