It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. 

Return the maximum number of ice cream bars the boy can buy with coins coins.

Note: The boy can buy the ice cream bars in any order

Example 1:

Input: costs = [1,3,2,4,1], coins = 7
Output: 4
Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.
Example 2:

Input: costs = [10,6,8,7,7,8], coins = 5
Output: 0
Explanation: The boy cannot afford any of the ice cream bars.
Example 3:

Input: costs = [1,6,3,1,2,5], coins = 20
Output: 6
Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.


This is a special case of the 0/1 knapsack problem where the value of every item is uniform. In such a case, dynamic programming is simply time consuming. Sorting is
clearly the better option. Given the constraints of the question, dp would either have a complexity of O(NW) or O(NV), where W = maximum weight of the knapsack, 
and V is the total sum of all the values. This greedy solution is however simply O(Nlogn)
so 0-1 knapsack code wont help here

class Solution {
public:
    int maxIceCream(vector<int>& costs, int coins) {
        ////////*int n=costs.size();
        int t[n+1][coins+1];
        for (int i=0;i<n+1;i++){
            for (int j=0;j<coins+1;j++){
                if (i==0){
                    t[i][j]=0;
                }
                if (j==0){
                    t[i][j]=1;
                }
            }
        }
        for (int i=1;i<n+1;i++){
            for (int j=1;j<coins+1;j++){
                if (costs[i-1]<=j){
                    t[i][j]=1+max(t[i-1][j-costs[i-1]],t[i-1][j]);
                }
                else{
                    t[i][j]=t[i-1][j];
                }
            }
        }
        return t[n][coins];*////////

        int ans=0;
        sort(costs.begin(),costs.end());
        for (int i=0;i<n;i++){
            if (costs[i]>coins){
                break;
            }
            coins-=costs[i];
            ans++;
        }
        return ans;
        
    }
};
