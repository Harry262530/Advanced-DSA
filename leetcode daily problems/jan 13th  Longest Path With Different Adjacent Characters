You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.

You are also given a string s of length n, where s[i] is the character assigned to node i.

Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.


Input: parent = [-1,0,0,1,1,2], s = "abacbe"
Output: 3
Explanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.
It can be proven that there is no longer path that satisfies the conditions.



This questions is very similary to finding the diameter of the tree with additional constraint of not choosing the node with same character value of it's parent
Now to find the diameter we see for any node present in a tree there are 3 ways of choosing a path as shown in the figure
So in this questions we do the same but extending this concept to a generic tree
So in a generic tree there are more than 2 nodes however the longest path can only be found from 2 of the longest nodes
Hence for every node, we will consider only the 2 longest child nodes.

Algo Steps:

Start from the source node
Iterate over all it's children
If the character value of the child and parent is same leave it
If the character value of the child and parent is different update the best and second_best possible values
finally try all the three cases shown in the first figure
update the answer with the best from the three cases

 
 Code:
 
class Solution {
public:
    vector<int>tree[100005];
    int ans;
    int FindLongestLength(int curr_node,string&s){
        
        int best=0,second_best=0;
        
        
        // traversing over all the child nodes of the curr_node
        for(auto child_node:tree[curr_node]){
		    // recursively trying for child nodes
            int len=FindLongestLength(child_node,s);
            
            // rejecting the current node if it's of same character
            if(s[child_node]==s[curr_node])
                continue;
            
			
			// updating the best and second_best paths that we can take from all the children of the given node
            if(len>best){
                second_best=best;
                best=len;
            }
            else if(len>second_best) {
                second_best=len;
            }
        }
        
		
	
        // now there are 3 possibilies  as discussed
		
		// however here we have reject one of the possibility as we have already selcted the
		// max from both the values
        
        // case 1 :  selecting the max of the two possible paths 
        int case1=1+best;
		
		// case 2:  
        int case2=1+best+second_best;
        
        // updating the answer
        ans=max({ans,case1,case2});
		
		
        return case1;
        
        
    }
    int longestPath(vector<int>& parent, string s) {
        for(int i=1;i<parent.size();i++)
            tree[parent[i]].push_back(i);
        
        ans=0;
        FindLongestLength(0,s);
        return ans;
    }
};
