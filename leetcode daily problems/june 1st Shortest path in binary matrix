Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1


class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid.size();
        if (row==0 || col==0 || grid[0][0]!=0 || grid[row-1][col-1]!=0){
            return -1;
        }
        queue<pair<int,int>> q;
        q.push({0,0});
        vector<vector<int>> direction={{1,1},{1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1}};
        grid[0][0]=1;
        while (!q.empty()){
            auto curr=q.front();
            q.pop();
            int x=curr.first;
            int y=curr.second;
            if (x==row-1 && y==col-1){
                return grid[x][y];
            }
            for (auto dist:direction){
                int nr=x+dist[0];
                int nc=y+dist[1];
                if (nr>=0 && nr<row && nc>=0 && nc<col && grid[nr][nc]==0){
                    q.push({nr,nc});
                    grid[nr][nc]=grid[x][y]+1;
                }
            }
        }
        return -1;
        
    }
};
