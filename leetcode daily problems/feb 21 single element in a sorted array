You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10


        0    1    2    3    4    5    6    7    8
nums = [1,   1,   2,   3,   3,   4,   4,   8,   8]

We start with left = 0, right = 8 => mid = 0+(8-0)/2 = 4
Now, 4 is an even index which means the first repeating number should be at 4 and the next at 5. 
But nums[4] != nums[5]. So on the left half the pattern's broken. 

Now, left = 0, right = 4 => mid = 0+(4-0)/2 = 2
Now again 2 is an even number so nums[2] should be equal to nums[3], but it is not. 

So again, left = 0, right = 2 => mid = 0+(2-0)/2 = 1
1 is an odd number and nums[1] == nums[0]. So, we do l = mid+1 (Since the left half has the pattern). 

Now l = r = 2. 
Hence stop the search and return nums[l] = 2.

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        int low=0;
        int high=nums.size()-1;
        while (low<high){
            int mid=low+(high-low)/2;
            int num;
            if (mid%2==0){
                num=mid+1;
            }
            else{
                num=mid-1;
            }
            if (nums[mid]==nums[num]){
                low=mid+1;
            }
            else{
                high=mid;
            }
        }
        return nums[low];
    }
};
