Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int t[n][m];
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (i==0 && j==0){
                    t[i][j]=grid[i][j];
                }
                else{
                    if (i==0){
                        t[i][j]=t[i][j-1]+grid[i][j];
                    }
                    if (j==0){
                        t[i][j]=t[i-1][j]+grid[i][j];
                    } 
                }
            }
        }
        for (int i=1;i<n;i++){
            for (int j=1;j<m;j++){
                t[i][j]=grid[i][j]+min(t[i-1][j],t[i][j-1]);
            }
        }
        return t[n-1][m-1];
    }
};
