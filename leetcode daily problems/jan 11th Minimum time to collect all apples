Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 3:

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0


class Solution {
    unordered_map<int,vector<int>> graph;
    unordered_map<int,bool> visited;
public:
    void createadj(vector<vector<int>> &edges){
        for (auto x:edges){
            graph[x[0]].push_back(x[1]);
            graph[x[1]].push_back(x[0]);
        }
    }

    int dfs(int node,int cost,vector<bool> &hasApple){
        if (visited[node]){
            return 0;
        }
        visited[node]=true;
        int apnacost=0;
        for (auto e:graph[node]){
            apnacost+=dfs(e,2,hasApple);
        }
        if (apnacost==0 && hasApple[node]==0){
            return 0;
        }
        return cost+apnacost;
    }
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        createadj(edges);
        return dfs(0,0,hasApple);
    }
};
