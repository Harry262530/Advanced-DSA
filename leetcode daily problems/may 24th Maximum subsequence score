You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.

For chosen indices i0, i1, ..., ik - 1, your score is defined as:

The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
Return the maximum possible score.

A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.

 

Example 1:

Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
Output: 12
Explanation: 
The four possible subsequence scores are:
- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.
- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. 
- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. 
- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.
Therefore, we return the max score, which is 12.
Example 2:

Input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1
Output: 30
Explanation: 
Choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.



Intuition
The idea is to consider for each element of array of nums2[i] as minimum once and check for maximum possible values available in nums1 keeping in mind nums2[i] as minimum .

Approach
First we sort the nums2 array in decreasing order and as we need to know the mapping of nums2[i] to nums1[i] so for that we make their pairs and then we sort.

Now we we will iterate through p array one by one and let p[i].first as the minimum for an instance then all the elements to left of p array can be considered for sum part.

But we can make priority queue for knowing top k elements to left of p array

And we will only keep k maximum elements at a time in priority queue and keep the tab of their sum .

Now please read the code and you will understand it . Upvotes are appreciated

Complexity
Time complexity: O( N * Log(N) + (N-k) * Log(k) )

Space complexity: O(N) + O(k) = O(N+K)

class Solution {
public:
    long long maxScore(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<pair<int,int>> map;
        for (int i=0;i<nums1.size();i++){
            map.push_back({nums2[i],nums1[i]});
        }
        sort(map.rbegin(),map.rend());
        long long ans=0;
        long long sum=0;
        priority_queue<int> q;
        for (int i=0;i<k-1;i++){
            sum+=map[i].second;
            q.push(-map[i].second);
        }
        for (int i=k-1;i<nums1.size();i++){
            sum+=map[i].second;
            q.push(-map[i].second);
            ans=max(ans,sum*map[i].first);
            sum+=q.top();
            q.pop();
        }
        return ans;
    }
};
