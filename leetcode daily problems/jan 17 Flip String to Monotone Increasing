A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.
Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.
Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.


Method 1:

class Solution {
public:
    int minFlipsMonoIncr(string s) {
        int flips=0;
        int count=0;
        for (auto x:s){
            if (x=='1'){
                count++;
            }
            else{
                flips++;
            }
            flips=min(flips,count);
        }
        return flips;
    }
};

using dp

class Solution {
public:
    int minFlipsMonoIncr(string s) {
        int one_count=0;
        int n=s.size();
        vector<int> dp(n+1);
        dp[0]=0;
        for (int i=1;i<=n;i++){
            if (s[i-1]=='1'){
                dp[i]=dp[i-1];
                one_count++;
            }
            else{
                dp[i]=min(dp[i-1]+1,one_count);
            }
        }
        return dp[n];
    }
};


optimising dp and it changes to same

class Solution {
public:
    int minFlipsMonoIncr(string s) {
        int one_count=0;
        int dp=0;
        int n=s.size();
        for (int i=1;i<=n;i++){
            if (s[i-1]=='1'){
                one_count++;
            }
            else{
                dp=min(dp+1,one_count);
            }
        } 
        return dp;
    }
};
