There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.
Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.



class Solution {
    private:
    /*bool dfs( vector<int> adj[],vector<int> &visited,vector<int> &parent,int src,int check[]){
        visited[src]=1;
        parent[src]=1;
        check[src]=0;
        for (auto x:adj[src]){
            if (!visited[x]){
                if (dfs(adj,visited,parent,x,check)==true){
                    check[src]=0;
                    return true;
                }
                else if(parent[x]==1){
                    check[src]=0;
                    return true;
                }
            }
        }
        check[src]=1;
        parent[src]=0;
        return false;
    }*/
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<vector<int>> adj(n);
        // for (auto x:graph){
        //     adj[x[0]].push_back(x[1]);
        // }
        // vector<int> parent(n,0);
        
        // vector<int> visited(n,0);
        // vector<int> ans;
        // int check[n];
        // for (int i=0;i<n;i++){
        //     dfs(adj,visited,parent,i,check);
        // }
        // for (int i=0;i<n;i++){
        //     if (check[i]==1){
        //         ans.push_back(i);
        //     }
        // }
        // return ans;
        for (int i=0;i<n;i++){
            for (auto x:graph[i]){
                adj[x].push_back(i);
            }
        }
        //here i reversed the graph
        vector<int> indegree(n,0);
        for (int i=0;i<n;i++){
            for (auto x:adj[i]){
                indegree[x]++;
            }
        }
        vector<int> topo;
        queue<int> q;
        for (int i=0;i<n;i++){
            if (indegree[i]==0){
                q.push(i);
            }
        }
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            topo.push_back(temp);
            for (auto x:adj[temp]){
                indegree[x]--;
                if (indegree[x]==0){
                    q.push(x);
                }
            }
        }
        sort(topo.begin(),topo.end());
        return topo;
    }
};
