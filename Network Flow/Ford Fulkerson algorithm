Given a graph which represents a flow network with N vertices numbered 1 to N and M edges.Find the maximum flow from vertex numbered 1 to vertex numbered N.

In a flow network,every edge has a flow capacity and the maximum flow of a path can't exceed the flow-capacity of an edge in the path.

Example 1:

Input:
N = 5, M =  4
Edges[]= {{1,2,1},{3,2,2},{4,2,3},{2,5,5}}
Output: 1 
Explanation: 
1 - 2 - 3
   / \
  4   5 
1 unit can flow from 1 -> 2 - >5 
 

Example 2:

Input:
N = 4, M = 4
Edges[] = {{1,2,8},{1,3,10},{4,2,2},{3,4,3}}
Output: 5 
Explanation:
  1 - 2 
  |   |
  3 - 4
3 unit can flow from 1 -> 3 -> 4
2 unit can flow from 1 -> 2 -> 4
Total max flow from 1 to N = 3+2=5



//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
public:
    bool bfs(vector<vector<int>> adj,vector<int> &parent,int src,int dest,int n){
        vector<bool> visited(n+1,false);
        queue<int> q;
        q.push(src);
        visited[src]=true;
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            for (int i=1;i<=n;i++){
                //check if next node is already visited in this traversal
                //also check if the residual flow(bcha hua flow) is zero or not
                if (!visited[i] && adj[temp][i]!=0){
                    q.push(i);
                    parent[i]=temp;
                    visited[i]=true;
                }
            }
        }return visited[dest];
    }
    int findMaxFlow(int N,int M,vector<vector<int>> Edges)
    {
        vector<vector<int>> adj(N+1,vector<int>(N+1,0));
        int ans=0;
        for (auto it:Edges){
            adj[it[0]][it[1]]+=it[2];
            adj[it[1]][it[0]]+=it[2];
        }
        int src=1;
        int dest=N;
        vector<int> parent(N+1,-1);
        while (bfs(adj,parent,src,dest,N)){
            //find bottle neck for that flow
            int mini=INT_MAX;
            int i=dest;
            //check for parent[i]=-1 because only source has -1 as parent
            while (parent[i]!=-1){
                mini=min(mini,adj[parent[i]][i]);
                i=parent[i];
            }
            i=dest;
            while (parent[i]!=-1){
                adj[parent[i]][i]-=mini;
                adj[i][parent[i]]+=mini;
                i=parent[i];
            }
            ans+=mini;
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--){
        int i,j,N,M,u,v,w;
        int res;
        scanf("%d %d",&N,&M);
        vector<vector<int>> Edges; 
        for(i=0;i<M;i++)
        {
            scanf("%d %d %d",&u,&v,&w);
        	Edges.push_back({u,v,w});
    	}
        Solution obj;
        res = obj.findMaxFlow(N, M, Edges);
        cout<<res<<endl;
    }
    return 0;
}
// } Driver Code Ends
