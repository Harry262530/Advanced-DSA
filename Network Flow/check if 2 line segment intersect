 Given the coordinates of the endpoints(p1-q1 and p2-q2) of the two line-segments. Check if they intersect or not.

Example 1:

Input:
p1=(1,1)
q1=(10,1)
p2=(1,2)
q2=(10,2)
Output:
0
Explanation:
The two line segments formed 
by p1-q1 and p2-q2 do not intersect.
Example 2:

Input:
p1=(10,0)
q1=(0,10)
p2=(0,0)
q2=(10,10)
Output:
1
Explanation:
The two line segments formed 
by p1-q1 and p2-q2 intersect.

Your Task:
You don't need to read input or print anything. Your task is to complete the function doIntersect() which takes the four points as input parameters and returns 1 if the line segments intersect. Otherwise, it returns 0.




//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    //check if 2 points lies on a segemrnt
        bool onsegment(int p[],int q[],int r[]){
            if (q[0]<=max(p[0],r[0]) && q[0]>=min(p[0],r[0]) && q[1]<=max(p[1],r[1]) && q[1]>=min(p[1],r[1])){
                return true;
            }
            return false;
        }
    //check if its orientation is clock or anticlock or collinear
        int orientation(int p[],int q[],int r[]){
            int val=(q[1]-p[1])*(r[0]-q[0])-(q[0]-p[0])*(r[1]-q[1]);
            if (val==0){
                return 0;
            }
            else if (val>0){
                return 1;
            }
            else{
                return 2;
            }
        }   
    int doIntersect(int p1[], int q1[], int p2[], int q2[]) {
        int o1=orientation(p1,q1,p2);
        int o2=orientation(p1,q1,q2);
        int o3=orientation(p2,q2,p1);
        int o4=orientation(p2,q2,q1);
        
        if (o1!=o2 && o3!=o4){
            return true;
        }
        if (o1==0 && onsegment(p1,p2,q1)){
            return true;
        }
        if (o2==0 && onsegment(p1,q2,q1)){
            return true;
        }
        if (o3==0 && onsegment(p2,p1,q2)){
            return true;
        }
        if (o4==0 && onsegment(p2,q1,q2)){
            return true;
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int p1[2], q1[2], p2[2], q2[2];
        cin >> p1[0] >> p1[1] >> q1[0] >> q1[1] >> p2[0] >> p2[1] >> q2[0] >>
            q2[1];
        Solution ob;
        cout << ob.doIntersect(p1, q1, p2, q2) << "\n";
    }
}
// } Driver Code Ends
