You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)
Example 2:

Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]
Example 3:

Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).


For each l, move r left until you find the rightmost r that "works" for that l (A[l] + A[r] <= target).

Once you find a valid r for your l, you need to add this number of subsequences to ans.

All of these subsequences will contain l. So you don't need to worry about that. You need to count the number of subsequences in the array from l+1 to r including the empty subsequence! You include the empty subsequence because l on its own is a valid subsequence, so you can combine it with an empty subsequence and still have a valid subsequence.

For example:

A = [3, 5, 6], target = 9
l = 0, r = 2
A[l] + A[r] is equal to target, so we need to add this number of subsequences.
Remember, this set of subsequences will include 3. It can also include any of subsequences of [5, 6], which are [5], [6], [5, 6], and []. That is 4 subsequences, which equals 2^2, or 2^(r-1)

Then we check the rest of the array:

l = 1, r =2
A[l] + A[r]  > target, so r -= 1
l = 2, r =2
A[l] + A[r]  > target, so r -= 1




class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        int mod=1000000007;
        int n=nums.size();
        int i=0,j=n-1;
        int ans=0;
        sort(nums.begin(),nums.end());
        vector<int> pows(n+1,1);
        for (int i=1;i<n+1;i++){
            pows[i]=(pows[i-1]*2)%mod;
        }
        while (i<=j){
            if (nums[i]+nums[j]<=target){
                ans=(ans+pows[j-i])%mod;
                i++;
            }
            else{
                j--;
            }
        }
        return ans;
    }
};
