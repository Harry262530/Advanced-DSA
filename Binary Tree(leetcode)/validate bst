/*Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
 Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
*/

class Solution {
public:
    bool isbst(TreeNode *root,long min1,long max1){
        if (root==NULL){
            return true;
        }
        if (root->val>min1 && root->val<max1){
            bool left1=isbst(root->left,min1,root->val);
            bool right1=isbst(root->right,root->val,max1);
            return left1 && right1;
        }
        else {
            return false;
        }
    }
    bool isValidBST(TreeNode* root) {
        long min1=LONG_MIN;
        long max1=LONG_MAX;
        return isbst(root,min1,max1);
    }
};
