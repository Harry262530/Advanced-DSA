A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at
most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

class Solution {
public:
    int helper(TreeNode *root,int &maxi){
        if (root==NULL){
            return 0;
        }
        int lp=max(0,helper(root->left,maxi));
        int rp=max(0,helper(root->right,maxi));
        maxi=max(maxi,lp+rp+root->val);
        return root->val+max(lp,rp);
    }
    int maxPathSum(TreeNode* root) {
        int maxi=INT_MIN;
        helper(root,maxi);
        return maxi;
    }
};
