Example 1:

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: 
After merging and sorting the
two BST we get 1 2 2 3 3 4 5 6 6 7.


class Solution
{
    public:
    //Function to return a list of integers denoting the node 
    //values of both the BST in a sorted order.
    void inorder(Node *root,vector<int> &head){
        while (root==NULL){
            return;
        }
            inorder(root->left,head);
            head.push_back(root->data);
            inorder(root->right,head);
    }
    vector<int> merge(vector<int> &head1,vector<int> &head2){
        vector<int> ans;
        int i=0;
        int j=0;
        while (i<head1.size() && j<head2.size()){
            if (head1[i]<head2[j]){
                ans.push_back(head1[i]);
                i++;
            }
            else{
                ans.push_back(head2[j]);
                j++;
            }
        }
        while (i<head1.size()){
            ans.push_back(head1[i]);
            i++;
        }
        while (j<head2.size()){
            ans.push_back(head2[j]);
            j++;
        }
        return ans;
        
    }
    vector<int> merge(Node *root1, Node *root2)
    {
        vector<int> head1;
        vector<int> head2;
        inorder(root1,head1);
        inorder(root2,head2);
        return merge(head1,head2);
    }
};
