Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

/*************code**************\

class Solution {
public:
    TreeNode *bst(vector<int> nums,int start,int end){
        if (start>end){
            return NULL;
        }
        int mid=(end+start)/2;
        TreeNode *root=new TreeNode(nums[mid]);
        root->left=bst(nums,start,mid-1);
        root->right=bst(nums,mid+1,end);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if (nums.size()==0){
            return NULL;
        }
        TreeNode *root1=bst(nums,0,nums.size()-1);
        return root1;
    }
};
