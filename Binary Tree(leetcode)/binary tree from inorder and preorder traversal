Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

map vaale tarike se last test case mai TLE dera tha

           /*********code***********\
           
class Solution {
public:
    int position(vector<int> inorder,TreeNode *root){
        int n=inorder.size();
        for (int i=0;i<n;i++){
            if (inorder[i]==root->val){
                 return i;
                break;
            }
        }
        return -1;
    }
   /* void createmap(unordered_map<int,int> &valuetoindex,vector<int> inorder){
        int n=inorder.size();
        for (int i=0;i<n;i++){
            valuetoindex[inorder[i]]=i;
        }
    }*/
    TreeNode* pi(vector<int> &preorder,vector<int> &inorder,int &preindex,int si,int ei){
        if (inorder.size()<=preindex||si>ei){
            return NULL;
        }
        
        TreeNode *root=new TreeNode(preorder[preindex]);
        preindex++;
        // int inindex=position(inorder,root);
        int inindex=position(inorder,root);
        
        root->left=pi(preorder,inorder,preindex,si,inindex-1);
        root->right=pi(preorder,inorder,preindex,inindex+1,ei);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.size()==0){
            return NULL;
        }
        //unordered_map<int,int> valuetoindex;
        //createmap(valuetoindex,inorder);
        int preindex=0;
        TreeNode *roo1t=pi(preorder,inorder,preindex,0,inorder.size());
        return roo1t;
    }
