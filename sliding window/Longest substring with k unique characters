Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.


Input:
S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest 
substring with K distinct characters.

//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{
  public:
    int longestKSubstr(string s, int k) {
        int i=0,j=0;
        unordered_map<char,int> map;
        int maxi=INT_MIN;
        while (j<s.length()){
            map[s[j]]++;
            if (map.size()<k){
                j++;
            }
            else if (map.size()==k){
                maxi=max(maxi,j-i+1);
                j++;
            }
            else if(map.size()>k){
                while (map.size()>k){
                    map[s[i]]--;
                    if (map[s[i]]==0){
                        map.erase(s[i]);
                    }
                    i++;
                }
                j++;
            }
        }
        if (maxi<0){
            return -1;
        }
        return maxi;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        int k;
        cin >> k;
        Solution ob;
        cout << ob.longestKSubstr(s, k) << endl;
    }
}

// } Driver Code Ends

