/*Given the head of a linked list, return the list after sorting it in ascending order.

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
*/

                            /*********************Code**********************\
                            
class Solution {
public:

    ListNode *merge(ListNode *head1,ListNode *head2){
        if (!head1){
            return head2;
        }
        if (!head2){
            return head1;
        }
        ListNode *dummy=new ListNode(-100001);
        ListNode *curr=dummy;
        while (head1 && head2){
            if (head1->val<head2->val){
                curr->next=head1;
                head1=head1->next;
            }
            else{
                curr->next=head2;
                head2=head2->next;
            }curr=curr->next;
        }
        while (head1){
            curr->next=head1;
            curr=curr->next;
            head1=head1->next;
            
        }
        while (head2){
            curr->next=head2;
            curr=curr->next;
            head2=head2->next;
            
        }
        return dummy->next;
    }
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next){
            return head;
        }
        ListNode *slow=head;
        ListNode *fast=head;
        ListNode *prev=NULL;
        while (fast && fast->next){
            fast=fast->next->next;
            prev=slow;
            slow=slow->next;
        }
        prev->next=NULL;
        ListNode *p1=sortList(head);
        ListNode *p2=sortList(slow);
        return merge(p1,p2);
    }
};
