class Solution {
public:

/*agar middle se just 1 pehle rukna hai to fast ko head ke next se start karo  fast=head->next*/

    pair<ListNode*,ListNode*> middle(ListNode *head){
        pair<ListNode*,ListNode*> pa;
        if (head==NULL || head->next==NULL){
            return {NULL,head};
        }
        ListNode *slow=head;
        ListNode *fast=head;
        ListNode *prev=NULL;
        while (fast && slow && fast->next){
            fast=fast->next->next;
            prev=slow;
            slow=slow->next;
        }
        return {prev,slow};

    }
    TreeNode* sortedListToBST(ListNode* head) {
        if (head==NULL ){
            return NULL;
        }
        pair<ListNode*,ListNode*> p=middle(head);
        ListNode *prev=p.first;
        ListNode *middle=p.second;
        TreeNode *root=new TreeNode(middle->val);
        if (prev){
            prev->next=NULL;
            root->left=sortedListToBST(head);
        }
        root->right=sortedListToBST(middle->next);
        return root;

    }
};
