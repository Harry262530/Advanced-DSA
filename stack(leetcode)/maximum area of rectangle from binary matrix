Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.

class Solution {
public:
    void nsi(vector<int> heights,vector<int> &ansr){
        stack<pair<int,int>> s;
        for (int i=heights.size()-1;i>=0;i--){
            if (s.size()==0){
                ansr.push_back(heights.size());
            }
            else if (s.size()>0 && s.top().first<heights[i]){
                ansr.push_back(s.top().second);
            }
            else if (s.size()>0 && s.top().first>=heights[i]){
                while (s.size()>0 && s.top().first>=heights[i]){
                    s.pop();
                }
                if (s.size()==0){
                    ansr.push_back(heights.size());
                }
                else{
                    ansr.push_back(s.top().second);
                }
            }
            s.push(make_pair(heights[i],i));
        }
        reverse(ansr.begin(),ansr.end());
    }

    void psi(vector<int> heights,vector<int> &ansl){
        stack<pair<int,int>> s1;
        for (int i=0;i<heights.size();i++){
            if (s1.size()==0){
                ansl.push_back(-1);
            }
            else if (s1.size()>0 && s1.top().first<heights[i]){
                ansl.push_back(s1.top().second);
            }
            else if (s1.size()>0 && s1.top().first>=heights[i]){
                while (s1.size()>0 && s1.top().first>=heights[i]){
                    s1.pop();
                }
                if (s1.size()==0){
                    ansl.push_back(-1);
                }
                else{
                    ansl.push_back(s1.top().second);
                }
            }
            s1.push(make_pair(heights[i],i));
        }
    }
    int mah(vector<int>& heights) {
        vector<int> ansr;
        vector<int> ansl;
        nsi(heights,ansr);
        psi(heights,ansl);
        int maxi=0;
        for (int i=0;i<heights.size();i++){
            int w=(ansr[i]-ansl[i]-1);
            int l=heights[i];
            int area=l*w;
            maxi=max(maxi,area);
        }
        return maxi;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        vector<int> temp(matrix[0].size());
        int rows=matrix.size();
        int cols=matrix[0].size();
        for (int j=0;j<cols;j++){
            if (matrix[0][j]=='1'){
                temp[j]=1;
            }
            else{
                temp[j]=0;
            }
        }
        int ans=mah(temp);
        for (int i=1;i<rows;i++){
            for (int j=0;j<cols;j++){
                if (matrix[i][j]=='0'){
                    (temp[j])=0;
                }
                else{
                    temp[j]+=1;
                }
            }
            ans=max(ans,mah(temp));
        }
        return ans;
    }
};
