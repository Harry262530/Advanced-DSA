The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater
element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

method 1(using more time complexity)

class Solution {
public:
    void helper(vector<int> nums2,vector<int> &temp){
        stack<int> s;
        for (int i=nums2.size()-1;i>=0;i--){
            if (s.empty()){
                temp.push_back(-1);
            }
            else if(s.size()>0 && s.top()>nums2[i]){
                temp.push_back(s.top());
            }
            else if (s.size()>0 && s.top()<=nums2[i]){
                while (s.size()>0 && s.top()<=nums2[i]){
                    s.pop();
                }
                if (s.empty()){
                    temp.push_back(-1);
                }
                else{
                    temp.push_back(s.top());
                }
            }
            s.push(nums2[i]);
        }
        reverse(temp.begin(),temp.end());
    }
    int findposition(int val,vector<int> &nums2){
        for (int i=0;i<nums2.size();i++){
            if (nums2[i]==val){
                return i;
            }
        }
        return -1;
    }
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        vector<int> temp;
        helper(nums2,temp);
        for (int i=0;i<nums1.size();i++){
            int index=findposition(nums1[i],nums2);
            ans.push_back(temp[index]);
        }
        return ans;
    }
};

method2(using map to reduce time complexity)

class Solution {
public:
    void helper(vector<int> nums2,unordered_map<int,int> &map){
        stack<int> s;
        for (int i=nums2.size()-1;i>=0;i--){
            if (s.size()==0){
                map[nums2[i]]=-1;
            }
            else if(s.size()>0 && s.top()>nums2[i]){
                map[nums2[i]]=s.top();
            }
            else if (s.size()>0 && s.top()<=nums2[i]){
                while (s.size()>0 && s.top()<=nums2[i]){
                    s.pop();
                }
                if (s.size()==0){
                    map[nums2[i]]=-1;
                }
                else{
                    map[nums2[i]]=s.top();
                }
            }
            s.push(nums2[i]);
        }
    }
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        unordered_map<int,int> map;
        helper(nums2,map);
        /*for (int i=0;i<nums1.size();i++){
            ans.push_back(map[nums1[i]]);
        }*/
        for (auto x:nums1){
            ans.push_back(map[x]);
        }
        return ans;
    }
};
