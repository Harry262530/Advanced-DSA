largest rectangle in histogram

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram

Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

logic :
first calculate previous smaller element array and push -1 is no smaller is found
calculate next smaller element array and push size+1 if no smaller in right is found
now calculate right-left-1 and multiply it with their individual height to get area
find maximum area out of it

class Solution {
public:
    void nsi(vector<int> heights,vector<int> &ansr){
        stack<pair<int,int>> s;
        for (int i=heights.size()-1;i>=0;i--){
            if (s.size()==0){
                ansr.push_back(heights.size());
            }
            else if (s.size()>0 && s.top().first<heights[i]){
                ansr.push_back(s.top().second);
            }
            else if (s.size()>0 && s.top().first>=heights[i]){
                while (s.size()>0 && s.top().first>=heights[i]){
                    s.pop();
                }
                if (s.size()==0){
                    ansr.push_back(heights.size());
                }
                else{
                    ansr.push_back(s.top().second);
                }
            }
            s.push(make_pair(heights[i],i));
        }
        reverse(ansr.begin(),ansr.end());
    }

    void psi(vector<int> heights,vector<int> &ansl){
        stack<pair<int,int>> s1;
        for (int i=0;i<heights.size();i++){
            if (s1.size()==0){
                ansl.push_back(-1);
            }
            else if (s1.size()>0 && s1.top().first<heights[i]){
                ansl.push_back(s1.top().second);
            }
            else if (s1.size()>0 && s1.top().first>=heights[i]){
                while (s1.size()>0 && s1.top().first>=heights[i]){
                    s1.pop();
                }
                if (s1.size()==0){
                    ansl.push_back(-1);
                }
                else{
                    ansl.push_back(s1.top().second);
                }
            }
            s1.push(make_pair(heights[i],i));
        }
    }
    int largestRectangleArea(vector<int>& heights) {
        vector<int> ansr;
        vector<int> ansl;
        nsi(heights,ansr);
        psi(heights,ansl);
        int maxi=0;
        for (int i=0;i<heights.size();i++){
            int w=(ansr[i]-ansl[i]-1);
            int l=heights[i];
            int area=l*w;
            maxi=max(maxi,area);
        }
        return maxi;
    }
};
