Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.

We only need to keep track of which ones of the first n positive integers occur in the array. To do this with no extra space, we can treat the array like a 
boolean array, where sign(arr[i]) indicates whether the i-th positive integer is present or not. First, we replace all non-positive values with n + 1, since we'll 
only use these indices as storage space. Then, for every one of the first n positive numbers in the array, we turn the value at their corresponding index negative. 
Finally, all we need to do is check for the first positive value, which will give us the first missing positive. If we find no such index, then all natural numbers up 
to n are present, so we return n + 1.

in short
we replace the negative values with n+1 values so that they will be out of the range
we make the index negative if we found that value in the array
we identify the index which is not negative and it will be the missing number

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n=nums.size();
        for (int i=0;i<n;i++){
            if (nums[i]<=0){
                nums[i]=n+1;
            }
        }
        for (int i=0;i<n;i++){
            if (abs(nums[i])<=n && nums[abs(nums[i])-1]>0){
                nums[abs(nums[i])-1]*=-1;
            }
        }
        for (int i=0;i<n;i++){
            if (nums[i]>0){
                return i+1;
            }
        }
        return n+1;
    }
};
