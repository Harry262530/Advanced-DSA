Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i=0,j=0,k=0;
        
        int n1=nums1.size();
        int n2=nums2.size();
        vector<int> nums3(n1+n2,0);
        while (i<n1 && j<n2){
            if (nums1[i]<=nums2[j]){
                nums3[k]=nums1[i];
                i++;
                k++;
            }
            else{
                nums3[k]=nums2[j];
                k++;
                j++;
            }
        }
        while (i<n1){
            nums3[k]=nums1[i];
            i++;
            k++;
        }
        while (j<n2){
            nums3[k]=nums2[j];
            j++;
            k++;
        }
        int n=n1+n2;
        return n%2?nums3[n/2]:(nums3[n/2]+nums3[(n/2)-1])/2.0;
        /*double median;
        if (n%2==0){
            median=floor(nums3[n/2]);
        }
        else{
            median=(nums3[n/2]+nums3[(n/2)-1])/2.0;
        }
        return median;*/
    }
};
