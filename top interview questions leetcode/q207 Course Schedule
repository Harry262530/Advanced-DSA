There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


This problem is equivalent to detecting a cycle in the directed graph represented by prerequisites. Both BFS and DFS can be used to solve it using the idea of topological sort. Since pair<int, int> is inconvenient for implementing graph algorithms, we first transform it to the adjacency-list representation. If course u is a prerequisite of course v, then the adjacency list of u will contain v


class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
        vector<int> graph[n];
        vector<int> count(n,0);
        for (auto x:prerequisites){
            graph[x[1]].push_back(x[0]);
            count[x[0]]++;
        }
        queue<int> q;
        for (int i=0;i<n;i++){
            if (count[i]==0){
                q.push(i);
            }
        }
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            n--;
            for (auto child:graph[temp]){
                count[child]--;
                if (count[child]==0){
                    q.push(child);
                }
            }
        }
        return n==0;
    }
};
