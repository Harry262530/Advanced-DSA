Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


we use direction variable so that if one case is executed then only other is executed
basically we controlled flow of else if loops

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int rows=matrix.size();
        int cols=matrix[0].size();
        int left=0;
        int top=0;
        int right=cols-1;
        int bottom=rows-1;
        int direction=1;
        while (top<=bottom && left<=right){
            if (direction==1){
                for (int i=left;i<=right;i++){
                ans.push_back(matrix[top][i]);
                }
                top++;
                direction=2;
            }
            else if (direction==2){
                for (int i=top;i<=bottom;i++){
                ans.push_back(matrix[i][right]);
                }
                right--;
                direction=3;
            }
            else if (direction==3){
                for (int i=right;i>=left;i--){
                ans.push_back(matrix[bottom][i]);
                }
                bottom--;
                direction=4;
            }
            else if (direction==4){
                for (int i=bottom;i>=top;i--){
                ans.push_back(matrix[i][left]);
                }
                left++;
                direction=1;
            }
            
        }
        return ans;
    }
};
