Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        for (int i=0;i<nums.size();i++){
            if (nums[i]==target){
                ans.push_back(i);
                break;
            }
        }
        if (ans.size()==0){
            ans.push_back(-1);
        }
        for (int i=nums.size()-1;i>=0;i--){
            if (nums[i]==target){
                ans.push_back(i);
                break;
            }
        }
        if (ans.size()==1){
            ans.push_back(-1);
        }
        return ans;
    }
};



using binary search in logn time

int low=0;
        int high=nums.size()-1;
        vector<int> ans(2,-1);
        //first occurence
        while (low<=high){
            int mid=low+(high-low)/2;
            if (nums[mid]<target){
                low=mid+1;
            }
            else if (nums[mid]>target){
                high=mid-1;
            }
            else{
                if (mid==low || nums[mid]!=nums[mid-1]){
                    ans[0]=mid;
                    break;
                }
                else{
                    high=mid-1;
                    ans[0]=mid-1;
                }
            }
        }

        //last occurence
        low=0;
        high=nums.size()-1;
        while (low<=high){
            int mid=low+(high-low)/2;
            if (nums[mid]<target){
                low=mid+1;
            }
            else if (nums[mid]>target){
                high=mid-1;
            }
            else{
                if (mid==high || nums[mid]!=nums[mid+1]){
                    ans[1]=mid;
                    break;
                }
                else{
                    low=mid+1;
                    ans[1]=mid+1;
                }
            }
        }
        return ans;
    }
};
