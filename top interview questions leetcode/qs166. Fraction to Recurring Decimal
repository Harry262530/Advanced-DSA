Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 4, denominator = 333
Output: "0.(012)



So we can divide this question in three parts :

Division with its own multiple for eg. 8 / 4 = 2
Division without repeating numbers after decimal for eg. 41 / 2 = 20.5
Division with repeating numbers after decimal for eg. 14 / 3 = 4.(6) or 47 / 18 = 2.6(1)
Note : Here the repeating part is in bracket.

For 1st Part we can normally divide the numbers and add it to the ans string and return if the remainder is 0.

//Code: 
int q = num / den;
int r = num % den;
ans += q;
if(r == 0) return ans;

For the 3rd part we need to use and unordered_map so that we can store the the position from where the repeating of number starts in front of the remainder. If the remainder is already in the map then we insert the “(” opening bracket at the position of that rem and lastly append a “)” closing bracket and break out of the loop and return the ans.

//Code :
unordered_map<int, int> mp;
while(r != 0)
	if(mp(r) is in map)
		int pos = mp[r];
		ans.insert(pos, "(");
		ans += ')';
		break;
	else
		mp[r] = ans.length();
		r *= 10;
		q = r / den;
		r = r % den;
		ans += q;
    
    
    
    ///////code//////
    class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if(!numerator) return "0";
        string ans = "";
        if (numerator > 0 ^ denominator > 0) ans += '-';
        long num = labs(numerator), den = labs(denominator);
        long q = num / den;
        long r = num % den;
        ans += to_string(q);
        
        if(r == 0) return ans;
        
        ans += '.';
        unordered_map<long, int> mp;
        while(r != 0){
            if(mp.find(r) != mp.end()){
                int pos = mp[r];
                ans.insert(pos, "(");
                ans += ')';
                break;
            }
            else{
                mp[r] = ans.length();
                r *= 10;
                q = r / den;
                r = r % den;
                ans += to_string(q);
            }
        }
        return ans;
    }
};
