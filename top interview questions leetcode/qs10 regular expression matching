Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".


We define dp[i][j] to be true if s[0..i) matches p[0..j) and false otherwise. The state equations will be:

dp[i][j] = dp[i - 1][j - 1], if p[j - 1] != '*' && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
dp[i][j] = dp[i][j - 2], if p[j - 1] == '*' and the pattern repeats for 0 time;
dp[i][j] = dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'), if p[j - 1] == '*' and the pattern repeats for at least 1 time.


class Solution {
public:
    bool isMatch(string s, string p) {
        int n=s.size();
        int m=p.size();
        if (m==0 || n==0){
            return false;
        }
        vector<vector<bool>> t(n+1,vector<bool>(m+1,false));
        t[0][0]=true;
        for (int j=2;j<m+1;j++){
            if (p[j-1]=='*'){
                t[0][j]=t[0][j-2];
            }
        }
        for (int i=1;i<n+1;i++){
            for (int j=1;j<m+1;j++){
                if (p[j-1]=='*'){
                    t[i][j]=t[i][j-2] || (((p[j-2]==s[i-1]) || p[j-2]=='.') && t[i-1][j]);
                }
                else{
                    t[i][j]=t[i-1][j-1] && (p[j-1]==s[i-1] || p[j-1]=='.');
                }
            }
        }
        return t[n][m];
    }
};
