There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k],
nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

logic

Here's the trick:

If target is say in the left half, then when searching we need to make the numbers as
[12, 13, 14, 15, 16, 17, inf, inf, inf, inf, inf, inf, inf, inf]
if target is in right half then we need to make it as
[-inf, -inf, -inf, -inf, -inf, -inf, 0, 1, 2, 3, 4, 5, 6, 7]

That's when your target and nums[mid] are on the same half side (left or right half). THis means that your mid point and target are on the same half and you are 
converging towards the target. So then just keep doing regular binary for that step and let the comparator be nums[mid]
How do we check if they both (nums[mid] and target) are on the same half? We have to check if they are both greater than the pivot number or both smaller than pivot number
if (((nums[mid] > nums[0]) && (target > nums[0])) || ((nums[mid] <= nums[0]) && (target <= nums[0]))).

if target is greater than nums[0], target is on the left half. Look at the example above and you can see this.
For example: target is 14, it is greater than 12 so it belongs in left half
This means that nums[mid] is on the other half: right half. Make comparator as INF.
if target is less than nums[0], target is on the right half. Look at the example above:
For example if target is 5, it is less than 12 so it belongs in right half
This means that nums[mid] is on the other half. left half. make comparator as -INF.


class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start=0;
        int end=nums.size()-1;
        while (start<=end){
            int mid=start+((end-start)/2);
            int comp=nums[mid];
            if (target>=nums[0] && nums[mid]>=nums[0] || target<nums[0] && nums[mid]<nums[0]){
                comp=nums[mid];
            }
            else{
                if (target>=nums[0]){
                    comp=INT_MAX;
                }
                else {
                    comp=INT_MIN;
                }
            }
            if (target==comp){
                return mid;
            }
            if (target<comp){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return -1;
    }
};
