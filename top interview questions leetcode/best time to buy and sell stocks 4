You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 
 
 Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.



The first function is the solution for Best Time to Buy and Sell Stock II. We use it when we have unlimited transactions (k >= prices.size() / 2).
The main function is generalizaton of the solution for Best Time to Buy and Sell Stock III, where you can complete at most two transactions.\\\\


class Solution {
public:
    int stocksell2(vector<int> prices){
        int i=0;
        int ans=0;
        int buy=0;
        int sell=0;
        while (i<prices.size()-1){
            while (i<prices.size()-1 && prices[i+1]<=prices[i]){
                i++;
            }
            buy=prices[i];
            while (i<prices.size()-1 && prices[i+1]>=prices[i]){
                i++;
            }
            sell=prices[i];
            ans+=sell-buy;
        }
        return ans;
    }
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        if (k>=n/2){
            return stocksell2(prices);
        }
        vector<int> buy(k+1,INT_MIN),sell(k+1,0);
        for (auto x:prices){
            for (int i=1;i<=k;i++){
                buy[i]=max(buy[i],sell[i-1]-x);
                sell[i]=max(sell[i],buy[i]+x);
            }
        }
        return sell[k];
        
    }
};
