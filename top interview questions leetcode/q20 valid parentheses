Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Input: s = "()[]{}"
Output: true

class Solution {
public:
    bool ismatching(char a,char b){
        if (a=='(' && b==')' || a=='[' && b==']' || a=='{' && b== '}'){
            return true;
        }
        return false;
    }
    bool isValid(string s) {
        stack<char> s1;
        if (s.length()<2){
            return false;
        }
        for (int i=0;i<s.length();i++){
            if (s[i]=='(' || s[i]=='{' || s[i]=='['){
                s1.push(s[i]);
            }
            else if (!s1.empty() && ismatching(s1.top(),s[i])==false){
                return false;
            }
            else if (s1.empty()==true){
                return false;
            }
            else{
                s1.pop();
            }
            
        }
        return s1.empty()==true;
    }
};
