A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").


lOGIC
Idea is really simple, we at every index in the string we have got 2 choices :

Pick only current element as a single value between [1-9]
Pick 2 elements i.e current as well as next element to make a couple. This value will be [10, 26]
Thus we solve the problem recursively with the above 2 choices and whenever we reach the end i.e index >= n simply return 1. Which means that we have got one way to decode the string.

Now, lets understand the code in depth :

	Case 1 : Pick single element, so in this we pick current and call for index + 1. 
		note : In case of single pick, element should not be '0' as it is invalid
			
			-> ways = decode(s, idx+1, n)  
			: elements in range [1,9] is covered here in this case
			
	Case 2 : Pick couple, so that we can get elements in range [10, 26] . 
		Catch here is that we need to check and validate values so that we do not exceed the range. 
		
		conditions : 
			-> idx+1 < n , mean we are no going out of bounds.
			-> s[idx] == '1' && s[idx+1] <= '9' , here range [10, 19] is covered
			-> s[idx] == '2' && s[idx+1] < '7' , here range [20, 26] is covered
		
		Thus final condition becomes :
			-> if(idx+1 < n && ((s[idx] == '1' && s[idx+1] <= '9') || (s[idx]=='2' && s[idx+1] < '7')))
		
		Now, in this case, we need to increment index+2, since we have already included next element along with current element. 
			=> ways += decode(s, idx+2, n)
      
Now that we have taken care of all the cases, but wait, where is the base condition?
Lets see where and how we will terminate the recursion and return.

Case 1 : If current element is 0, we simply return 0 as it is not possible to get a character using 0. 
		Zero will only be used in couple with some number occuring before it. Ex : 1 0 , or 2 0 

	-> if(idx < n && s[idx] < 0) return 0;
	->This means that we cannot move further in decoding the string. Need to find some other way.

Case 2 : This is most important condition which gives us our answer. When we reach the end of the string this means that we have found a possible way to decode. 
	Thus this will contribute to answer and return 1. 
	
	-> if(idx >= n) return 1;  
	-> Ex : s = "1 2 0 2 5" , so if reach '5' somehow , that the decoded string required. Thus return 1
  
 
 
 ?????code
 
 class Solution {
public:
    
    int dp[102];
    int decode(string& s, int idx, int n)
    {
        if(idx < n && s[idx] == '0') return 0;
        if(idx >= n)
            return 1;
        
        if(dp[idx] != -1) return dp[idx];
        
        int ways = 0;
        
        // Pick single
        if(s[idx] != '0') ways = decode(s, idx+1, n);
            
        // Pick couple
        if(idx+1 < n && ((s[idx] == '1' && s[idx+1] <= '9') || (s[idx]=='2' && s[idx+1] < '7')))
           ways += decode(s, idx+2, n);
           
        return dp[idx] = ways;
    }
    
    int numDecodings(string s) {
       
        int n = s.size();
        memset(dp, -1, sizeof(dp));
        return decode(s, 0, n);
    }
};
