Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Input: root = [2,1,3]
Output: true

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


class Solution {
public:
    bool helper(TreeNode *root,long maxi,long mini){
        if (root==NULL){
            return true;
        }
        if (root->val<maxi && root->val>mini){
            bool left=helper(root->left,root->val,mini);
            bool right=helper(root->right,maxi,root->val);
            return left && right;
        }
        return 0;
    }
    bool isValidBST(TreeNode* root) {
        long mini=LONG_MIN;
        long maxi=LONG_MAX;
        return helper(root,maxi,mini);
    }
};
