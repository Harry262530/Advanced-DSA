Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        if (nums.size()<=2){
            return ans;
        }
        int i=0;
        sort(nums.begin(),nums.end());
        while (i<nums.size()){
            int start=i+1;
            int end=nums.size()-1;
            while (start<end){
                if (nums[i]+nums[start]+nums[end]==0){
                    ans.push_back({nums[i],nums[start],nums[end]});
                    start++;
                    end--;
                    while (start<end && nums[start]==nums[start-1]){
                        start++;
                    }
                    while (start<end && nums[end]==nums[end+1]){
                        end--;
                    }
                }
                else if(nums[i]+nums[start]+nums[end]<0){
                    start++;
                    while (start<end && nums[start]==nums[start-1]){
                        start++;
                    }
                }
                else{
                    end--;
                    while (start<end && nums[end]==nums[end+1]){
                        end--;
                    }
                }
            }
            i++;
            while (i<nums.size() && nums[i]==nums[i-1]){
                i++;
            }
        }
        return ans;
    }
};
