Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Logic
first create 2 arrays one for maximum for left and one for maximum for right
for any ith index calculate the maximum before it and maximum after it
finally for that index calculate the minimum of left maximum and right maximum and then subtarct it with the hiight of that tower
add all those result

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int left[n];
        int right[n];
        int maxil=height[0];
        int maxir=height[n-1];
        for (int i=0;i<n;i++){
            if (height[i]>=maxil){
                maxil=height[i];
                left[i]=maxil;
            }
            else{
                left[i]=maxil;
            }
        }
        for (int i=n-1;i>=0;i--){
            if (height[i]>=maxir){
                maxir=height[i];
                right[i]=maxir;
            }
            else{
                right[i]=maxir;
            }
        }
        int ans=0;
        for (int i=0;i<n;i++){
            int water=min(left[i],right[i])-height[i];
            ans+=water;
        }
        return ans;
    }
};
