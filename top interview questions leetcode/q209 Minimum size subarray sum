Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0


start from taking 2 pointers right and left
traverse right till sum becomes greater then target
Then start excluding left pointer and check till where sum is still greater then target
store the smallest in a variable

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int i=0,j=0,sum=0,ans=INT_MAX;
        while (j<nums.size()){
            sum+=nums[j++];
            while (sum>=target){
                ans=min(ans,j-i);
                sum-=nums[i++];
            }
        }
        return ans==INT_MAX?0:ans;
    }
};
